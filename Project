#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <limits>
using namespace std;

class Student {
private:
    string name;
    int rollNo;
    int age;
    string department;
    int marks[5];

public:
    // Constructor to initialize a new student
    Student(string name = "", int rollNo = 0, int age = 0, string department = "") {
        this->name = name;
        this->rollNo = rollNo;
        this->age = age;
        this->department = department;
        for (int i = 0; i < 5; i++) {
            marks[i] = 0;
        }
    }

    void inputDetails() {
        cout << "Enter student name: ";
        getline(cin, name);

        cout << "Enter roll number: ";
        cin >> rollNo;
        while (rollNo <= 0) {
            cout << "Invalid roll number! Enter again: ";
            cin >> rollNo;
        }

        cout << "Enter age: ";
        cin >> age;
        while (age <= 0 || age > 100) {
            cout << "Invalid age! Enter again: ";
            cin >> age;
        }

        cin.ignore();
        cout << "Enter department: ";
        getline(cin, department);

        // Input marks for the subjects
        for (int i = 0; i < 5; i++) {
            cout << "Enter marks for subject " << i + 1 << ": ";
            cin >> marks[i];
            while (marks[i] < 0 || marks[i] > 100) {
                cout << "Invalid marks! Enter again (0 to 100): ";
                cin >> marks[i];
            }
        }
    }

    void displayDetails() const {
        cout << name << "\t" << rollNo << "\t" << age << "\t" << department << "\t";
        for (int i = 0; i < 5; i++) {
            cout << marks[i] << " ";
        }
        cout << endl;
    }

    int getRollNo() const {
        return rollNo;
    }

    // Save to file format: name, rollNo, age, department, marks
    void saveToFile(ofstream &outFile) const {
        outFile << name << "\n" << rollNo << "\n" << age << "\n" << department << "\n";
        for (int i = 0; i < 5; i++) {
            outFile << marks[i] << " ";
        }
        outFile << "\n";
    }

    // Load data from file format: name, rollNo, age, department, marks
    void loadFromFile(ifstream &inFile) {
        getline(inFile, name);
        inFile >> rollNo >> age;
        inFile.ignore();
        getline(inFile, department);
        for (int i = 0; i < 5; i++) {
            inFile >> marks[i];
        }
        inFile.ignore();
    }

    // Update student details
    void updateDetails() {
        inputDetails();
    }

    void deleteStudent() {
        name = "";
        rollNo = 0;
        age = 0;
        department = "";
        for (int i = 0; i < 5; i++) {
            marks[i] = 0;
        }
    }
};

class StudentPortal {
private:
    vector<Student> students;

public:
    void addStudent() {
        Student newStudent;
        newStudent.inputDetails();
        students.push_back(newStudent);
        cout << "Student added successfully!" << endl;
    }

    void displayAllStudents() const {
        if (students.empty()) {
            cout << "No students to display!" << endl;
            return;
        }

        cout << "\nStudent List:\n";
        cout << "Name\tRoll No\tAge\tDepartment\tMarks\n";
        for (const auto &student : students) {
            student.displayDetails();
        }
    }

    void searchStudent(int rollNo) const {
        bool found = false;
        for (const auto &student : students) {
            if (student.getRollNo() == rollNo) {
                cout << "Student found: " << endl;
                student.displayDetails();
                found = true;
                break;
            }
        }
        if (!found) {
            cout << "No student found with roll number " << rollNo << endl;
        }
    }

    void updateStudent(int rollNo) {
        for (auto &student : students) {
            if (student.getRollNo() == rollNo) {
                cout << "Updating student details:" << endl;
                student.updateDetails();
                cout << "Student details updated!" << endl;
                return;
            }
        }
        cout << "Student with roll number " << rollNo << " not found!" << endl;
    }

    void deleteStudent(int rollNo) {
        for (auto it = students.begin(); it != students.end(); ++it) {
            if (it->getRollNo() == rollNo) {
                students.erase(it);
                cout << "Student deleted successfully!" << endl;
                return;
            }
        }
        cout << "Student with roll number " << rollNo << " not found!" << endl;
    }

    void saveToFile() const {
        ofstream outFile("students.txt");
        if (!outFile) {
            cout << "Error opening file!" << endl;
            return;
        }
        for (const auto &student : students) {
            student.saveToFile(outFile);
        }
        cout << "Data saved to file!" << endl;
    }

    void loadFromFile() {
        ifstream inFile("students.txt");
        if (!inFile) {
            cout << "No data file found!" << endl;
            return;
        }

        students.clear();
        while (inFile.peek() != EOF) {
            Student student;
            student.loadFromFile(inFile);
            students.push_back(student);
        }
        cout << "Data loaded from file!" << endl;
    }
};

int getMenuChoice() {
    int choice;
    cout << "\nStudent Portal Menu\n";
    cout << "1. Add Student\n";
    cout << "2. Display All Students\n";
    cout << "3. Search Student\n";
    cout << "4. Update Student\n";
    cout << "5. Delete Student\n";
    cout << "6. Save Data to File\n";
    cout << "7. Load Data from File\n";
    cout << "8. Exit\n";
    cout << "Enter your choice: ";
    cin >> choice;

    while (cin.fail() || choice < 1 || choice > 8) {
        cout << "Invalid choice! Please enter a number between 1 and 8: ";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cin >> choice;
    }

    return choice;
}

int main() {
    StudentPortal portal;
    int choice, rollNo;

    portal.loadFromFile();  // Load data from file at the start

    do {
        choice = getMenuChoice();

        switch (choice) {
            case 1:
                portal.addStudent();
                break;
            case 2:
                portal.displayAllStudents();
                break;
            case 3:
                cout << "Enter roll number to search: ";
                cin >> rollNo;
                portal.searchStudent(rollNo);
                break;
            case 4:
                cout << "Enter roll number to update: ";
                cin >> rollNo;
                portal.updateStudent(rollNo);
                break;
            case 5:
                cout << "Enter roll number to delete: ";
                cin >> rollNo;
                portal.deleteStudent(rollNo);
                break;
            case 6:
                portal.saveToFile();
                break;
            case 7:
                portal.loadFromFile();
                break;
            case 8:
                cout << "Exiting program..." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 8);

    return 0;
}
